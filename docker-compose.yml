version: '3.8'

# Configuration partag√©e
x-common-variables: &common-variables
  TZ: ${TZ:-Europe/Paris}
  LANG: C.UTF-8
  LC_ALL: C.UTF-8
  CC: /usr/bin/clang
  CXX: /usr/bin/clang++
  CMAKE_GENERATOR: Ninja
  BUILD_TYPE: ${BUILD_TYPE:-Debug}
  CCACHE_DIR: /ccache
  DISPLAY: ${DISPLAY:-:0}
  XAUTHORITY: /tmp/.docker.xauth

x-common-volumes: &common-volumes
  - ${PWD}:/home/developer/OpenYolo
  - build-cache:/home/developer/OpenYolo/build
  - ccache:/ccache
  - /tmp/.X11-unix:/tmp/.X11-unix:ro

# D√©finition des volumes partag√©s
volumes:
  build-cache:
  ccache:

services:
  # Service principal de d√©veloppement
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
      args:
        - DEBIAN_FRONTEND=noninteractive
    container_name: openyolo-dev
    environment:
      <<: *common-variables
    volumes:
      - ${PWD}:/home/developer/OpenYolo
      - build-cache:/home/developer/OpenYolo/build
      - ccache:/ccache
      - /tmp/.X11-unix:/tmp/.X11-unix:ro
      - /dev/input:/dev/input:ro
      - /dev/dri:/dev/dri  # Acc√©l√©ration mat√©rielle
    devices:
      - /dev/input
      - /dev/dri
    working_dir: /home/developer/OpenYolo
    command: /bin/bash
    tty: true
    stdin_open: true
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN  # N√©cessaire pour certains outils de d√©bogage
    privileged: true  # N√©cessaire pour certains outils de profilage

  # Service pour ex√©cuter les tests
  test:
    extends:
      service: dev
    container_name: openyolo-test
    working_dir: /home/developer/OpenYolo/build
    environment:
      TZ: ${TZ:-Europe/Paris}
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      CC: /usr/bin/clang
      CXX: /usr/bin/clang++
      CMAKE_GENERATOR: Ninja
      BUILD_TYPE: ${BUILD_TYPE:-Debug}
      CCACHE_DIR: /ccache
      DISPLAY: ${DISPLAY:-:0}
      XAUTHORITY: /tmp/.docker.xauth
      CTEST_OUTPUT_ON_FAILURE: 1
      CTEST_PARALLEL_LEVEL: 4
    command: >
      sh -c "
      cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE:-Debug} .. &&
      cmake --build . -- -j$(nproc) &&
      ctest --output-on-failure"

  # Service pour le formatage du code
  format:
    extends:
      service: dev
    container_name: openyolo-format
    working_dir: /home/developer/OpenYolo
    command: >
      sh -c "
      echo 'üîç Recherche des fichiers √† formater...' &&
      echo 'üìù Formatage du code C++...' &&
      find src include tests -name '*.h' -o -name '*.hpp' -o -name '*.cpp' | xargs clang-format -style=file -i -fallback-style=none &&
      echo 'üìù Formatage des scripts shell...' &&
      find scripts -name '*.sh' -exec shfmt -w -i 2 -ci -bn -s {} \; &&
      echo 'üìù Formatage des fichiers Python...' &&
      find . -name '*.py' -exec black --line-length=88 --target-version=py39 {} \; &&
      echo '‚úÖ Formatage termin√© avec succ√®s !'
      "
    # Ne pas red√©marrer le conteneur apr√®s l'ex√©cution
    restart: "no"

  # Service pour la g√©n√©ration de documentation
  docs:
    extends:
      service: dev
    container_name: openyolo-docs
    working_dir: /home/developer/OpenYolo/docs
    ports:
      - "8000:8000"  # Port pour la pr√©visualisation de la documentation
    command: >
      sh -c "
      echo 'üìö Installation des d√©pendances de documentation...' &&
      pip install -r requirements-docs.txt &&
      echo 'üìñ G√©n√©ration de la documentation...' &&
      make html &&
      echo 'üåç Lancement du serveur de documentation sur http://localhost:8000' &&
      cd _build/html && python -m http.server 8000
      "
  # Service pour le profilage et l'analyse des performances
  profile:
    extends:
      service: dev
    container_name: openyolo-profile
    working_dir: /home/developer/OpenYolo
    cap_add:
      - SYS_ADMIN
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    privileged: true
    command: /bin/bash
    environment:
      <<: *common-variables
      PERF_EVENTS: 1
      DEBUG: 1

  # Service pour la construction des paquets
  builder:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: openyolo-builder
    environment:
      - BUILD_TYPE=Release
    volumes:
      - ${PWD}:/home/developer/OpenYolo
      - build-cache:/home/developer/OpenYolo/build
      - ccache:/ccache
    working_dir: /home/developer/OpenYolo
    user: developer
    command: ["/bin/bash", "scripts/build-packages.sh"]
    # Ne pas red√©marrer le conteneur apr√®s l'ex√©cution
    restart: "no"
