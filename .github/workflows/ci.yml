name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Permet de d√©clencher manuellement le workflow
  release:
    types: [ created ]

env:
  BUILD_TYPE: Release
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_DEFAULT_PLATFORM: linux/amd64

jobs:
  # ============================================
  # Build and Test on Linux
  # ============================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Build and test
      run: |
        # Build the image
        docker-compose -f docker-compose.ci.yml build test
        
        # Run tests
        docker-compose -f docker-compose.ci.yml run --rm test
    
    - name: Check code formatting
      run: |
        # Build the format image
        docker-compose -f docker-compose.ci.yml build format
        
        # Run format check
        docker-compose -f docker-compose.ci.yml run --rm format
        
        # Check for formatting issues
        git diff --exit-code || (echo "Code formatting issues detected. Run 'docker-compose run --rm format' to fix them." && exit 1)
    
    - name: Build release package
      if: matrix.build-type == 'Release' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      run: |
        # Build the release package
        docker-compose -f docker-compose.ci.yml build package
        docker-compose -f docker-compose.ci.yml run --rm package
    
    - name: Upload artifacts
      if: matrix.build-type == 'Release' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: actions/upload-artifact@v3
      with:
        name: openyolo-package
        path: dist/*
    
    - name: Create Release
      if: github.event_name == 'release' && github.event.action == 'created'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================
  # Lint and Static Analysis
  # ============================================
  lint:
    name: Lint and Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
    
    - name: Run Black
      run: black --check .
    
    - name: Run Flake8
      run: flake8 .
    
    - name: Run Mypy
      run: mypy --ignore-missing-imports .

  # ============================================
  # Build and Push Docker Image
  # ============================================
  build-docker:
    name: Build and Push Docker Image
    needs: [build-and-test, lint]
    if: github.event_name == 'release' && github.ref_type == 'tag'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: roddygithub/open-yolo
        tags: |
          type=raw,value=latest
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=long,prefix=,suffix=,enable=${{ github.event_name != 'tag' }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=ghac,mode=max
